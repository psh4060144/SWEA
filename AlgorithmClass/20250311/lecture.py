# 시험 빈출
####################################################################################
# 논리와 증명
# 알고리즘 설계 + 디버깅에는 논리적인 사고가 아주 중요하다.
# 즉, 수학적으로 증명을 해야 한다. 왜? 알고리즘이 정확하다! 라는 것을 증명하기 위해.

# 가정이 거짓이라면 전체는 항상 참이 된다.

# 명제란? 참, 거짓으로 판별할 수 있는 문장.
# 명제가 참임을 증명하는 방법: 대우 증명, 직접 증명, 간접 증명(모순 증명).

# 대우 증명
# 대우 명제가 참이라면 원래 명제도 참이다.

# 직접 증명
# 명제 자체가 참임을 증명한다.

# 간접 증명(모순 증명)
# 반대 가정이 모순임을 증명하면 원래 명제가 참이다.

# 진리표 그리기
# ∀x : 모든 x에 대해~
# ∃x : x 가 하나라도 만족하는 경우가 있다면~

# 항진명제: 진리값이 항상 참인 명제.
# 모순명제: 진리값이 항상 거짓인 명제.

# 57p.
# ① 모든 실수에 대해~
# ② 모든 정수에 대해~
# ③ 어떤 실수에 대해~ (뒤 조건을 만족하는 x 가 하나라도 있는가?)
# ④ 어떤 정수에 대해~ (뒤 조건을 만족하는 x 가 하나라도 있는가?)

# 66p.
# 대우 증명 사용
# n 이 3의 배수가 아니라면 n^2 는 3의 배수가 아니다.
# 1. n 이 3의 배수가 아니라면 n = 3k+1로 표현 가능.
#    n^2 = 9k^2+6k+1 = 3(3k^2+2k)+1. 마찬가지로 3k+1 형태이므로 3의 배수가 아니다.
# 2. n 이 3의 배수가 아니라면 n = 3k+2로 표현 가능.
#    n^2 = 9k^2+12k+4 = 3(3k^2+4k+1)+1. 3k+1 형태이므로 3의 배수가 아니다.
####################################################################################


# 수와 표현
# 컴퓨터는 데이터를 이진법으로 표현한다. 따라서, 효율적으로 알고리즘을 설계해야 한다. 이를 통해 메모리 관리에 이점을 가질 수 있다.

# 어떤 값 n 을 표현하기 위해서는 몇 개의 비트가 필요할까?
# 2^k - 1 >= n 이 성립해야 함. 즉, 2^k >= n + 1.
# 즉, k >= log(n+1) -> 약 log(n+1) 비트가 필요함.

# 74p.
# 2진수 표현에서 logn 비트로 표현할 수 있는 숫자 범위는?
# n 비트 = 2^n 가지 숫자. 즉, log n 비트 = n 가지 숫자.

# 78p.


# 집합과 조합론
# 많은 데이터 구조들에서 활용되는 개념.
#    경우의 수, 해시, 트리, 경로 탐색 등.

# 수학적 귀납법
#    특정 사례로부터 출발하여, 일반적인 규칙을 찾는 방법.
#    기저 사례, 귀납 가정, 귀납 단계
# 귀류법
#    어떤 명제가 거짓일 수 없다고 가정하고 이로 인해 발생하는 모순을 찾는 방식.


# 시험 빈출
####################################################################################
# 기초 수식 - 시간 복잡도 증명
# 알고리즘의 효율성을 분석 + 최적화. 매우매우 중요.

# 신경써야 하는 것: n 값이 얼마나 반복되는가? 또, 반복마다 연산횟수가 얼마나 증가하는가?
####################################################################################


# 재귀
# 언제 써야 하는가?
# n중 반복문이 필요할 때.
# 문제를 작은 문제로 분할할 수 있을 때.
#    분할 정복.
# 언제 재귀함수에서 return 을 써야 할까?
# 작은 문제들의 결과를 더 큰 문제에 합쳐야 할 때.


# 다이나믹 프로그래밍
# 작은 문제들로 분할해서 푸는 경우가 많은데, 이러면 중복된 문제들이 많이 발생한다.
# 이럴 때, 한 번 계산한 결과를 저장하고 저장된 결과를 재활용하여 중복 계산을 피한다.
# 메모이제이션, 점화식.
# dp로 문제를 풀려면, 결국 많은 문제를 풀어 직관을 늘려야 한다.
