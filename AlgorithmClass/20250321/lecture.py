# MST (최소 신장 트리)
# 양방향 그래프에서 최소한의 간선으로 모든 노드를 연결하면서 사이클이 없는 트리.
# 노드의 수가 N 개일 때 N - 1 개의 간선을 구할 수 있음.
# - Prim: 정점을 기준으로 작은 가중치부터 고르자.
#   - 우선순위 큐가 사용됨. 시간 복잡도는 O(V * logV + E * logE).
#       - V * logV: 보통 E 가 더 크기 때문에 생략하는 경우가 많음.
#       - E * logV: E 개의 간선을 우선순위 큐에 넣는 시간.
#       - heap tree 를 사용하기 때문에 최적화를 하지 않아도 logE 만큼 높아지지 않음.
#       - 결론: 정점에 비해 간선이 많을수록 유리하다.
# - Kruskal: 간선을 기준으로 작은 가중치부터 고르자.
#   - 정렬이 사용됨. 간선이 E 개라면 시간 복잡도는 O(E * logE) + 사이클 검사(Union-find). 즉, 거의 상수.
#       - 결론: 정점에 비해 간선이 적을수록 유리하다.

# 최단 거리
# - Dijkstra
# - 최장 거리 문제는 풀 수 없다.
# - 그럼 어떻게 푸나? 벨만-포드로 풀어야 한다....
