N = '1D06079861D79F99F'                                         # input 값 입력
dictionary = {                                                  # 16진수를 2진수로 바꾸기 위해 dictionary 제작
    '0': '0000', '1': '0001', '2': '0010', '3': '0011',
    '4': '0100', '5': '0101', '6': '0110', '7': '0111',
    '8': '1000', '9': '1001', 'A': '1010', 'B': '1011',
    'C': '1100', 'D': '1101', 'E': '1110', 'F': '1111',
}

m = ''                                                          # 2진수 string 을 제작하기 위해 빈 string 을 제작.
for i in range(len(N)):                                         # 16진수의 모든 수를
    m += dictionary[N[i]]                                       # 2진수로 바꾸어 string 에 추가.

M = len(m)                                                      # 2진수의 길이를 구함.
for j in range(0, M, 7):                                        # 7칸씩 뛰며 계산.
    total = 0                                                   # 10진수로 출력하기 위해 변수를 설정.
    count = 7                                                   # 7개씩 확인하기 위해 count 변수를 설정.
    while count > 0:                                            # count 변수가 유효하지 않을때까지 반복.
        count -= 1                                              # count 변수를 1 줄이고
        if j + 6 - count < M:                                   # 범위를 벗어나지 않는다면
            total += int(m[j + 6 - count]) * (2 ** count)       # 해당 자릿수의 값을 계산하여 변수에 추가.
        else:                                                   # 벗어난다면
            count += 1                                          # 줄였던 count 변수를 1 늘림
            break                                               # 이후 반복 종료
    total = total >> count                                      # 마지막으로 나온 값에 2^count 를 나눠줌.
    print(total, end=' ')                                       # 양식에 맞게 출력

# idea
# 011 의 경우 line 24를 제외한 위의 코드로 변환하면 0110000 취급이 되어 48이 나온다.
# 하지만 문제대로라면 011은 3이 나와야 한다. 이걸 어떻게 원하는 대로 바꿀 수 있을까 고민한 결과,
# 0110000 에서 2^(오른쪽에 추가된 0의 갯수) 를 나누면 원하는 값이 나온다.
# 즉, 반복이 끝나는 시점에서 2^count 로 나눠주면 7개 꽉 차있는 수는 1로 나누는 결과이고, 모자라는 수는 모자라는 만큼 작아진다.